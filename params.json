{"name":"cusplibrary.github.com","tagline":"CUSP : A C++ Templated Sparse Matrix Library","body":"![CUSP](https://raw.github.com/cusplibrary/cusplibrary/master/media/cusp_logo.png) \r\n\r\nCusp is a library for sparse linear algebra and graph computations on CUDA. Cusp provides a flexible, high-level interface for manipulating sparse matrices and solving sparse linear systems. Get Started with Cusp today!\r\n\r\n\r\n## News\r\nCusp v0.4.0 has been released with support for CUDA 5.5. See CHANGELOG for release information.\r\n\r\nCusp v0.3.0 has been released with support for CUDA 4.1. See CHANGELOG for release information.\r\n\r\nCusp v0.2.0 has been released! See CHANGELOG for release information.\r\n\r\nCusp v0.1.2 has been released! v0.1.2 contains compatibility fixes for Thrust v1.3.0.\r\n\r\nCusp v0.1.1 has been released! v0.1.1 contains compatibility fixes for CUDA 3.1.\r\n\r\nCusp v0.1.0 has been released!.\r\n\r\nAdded QuickStartGuide page.\r\n\r\n# Examples\r\n\r\nThe following example loads a matrix from disk, transparently converts the matrix to the highly-efficient HYB format, and transfers the matrix to the GPU device. The linear system A*x = b is them solved on the device using the Conjugate Gradient method. A more detailed version of this example is also [available](https://github.com/cusplibrary/cusplibrary/blob/master/examples/Solvers/cg.cu).\r\n\r\n    #include <cusp/hyb_matrix.h>\r\n    #include <cusp/io/matrix_market.h>\r\n    #include <cusp/krylov/cg.h>\r\n\r\n    int main(void)\r\n    {\r\n        // create an empty sparse matrix structure (HYB format)\r\n        cusp::hyb_matrix<int, float, cusp::device_memory> A;\r\n\r\n        // load a matrix stored in MatrixMarket format\r\n        cusp::io::read_matrix_market_file(A, \"5pt_10x10.mtx\");\r\n\r\n        // allocate storage for solution (x) and right hand side (b)\r\n        cusp::array1d<float, cusp::device_memory> x(A.num_rows, 0);\r\n        cusp::array1d<float, cusp::device_memory> b(A.num_rows, 1);\r\n\r\n        // solve the linear system A * x = b with the Conjugate Gradient method\r\n        cusp::krylov::cg(A, x, b);\r\n\r\n        return 0;\r\n    }","google":"UA-34296872-1","note":"Don't delete this file! It's used internally to help with page regeneration."}